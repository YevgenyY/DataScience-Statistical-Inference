getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
invs <- cacheSolve(mx)
invs
mx <- makeCacheMatrix(rbind(c(1,2,3), c(4,5,6), c(7,8,9)))
invs <- cacheSolve(mx)
mx <- makeCacheMatrix(rbind(c(1,1,1), c(2,2,2), c(3,3,3)))
invs <- cacheSolve(mx)
mx <- makeCacheMatrix(rbind(c(1,2,3), c(1,2,3), c(1,2,3)))
invs <- cacheSolve(mx)
mx$get()
m<-mx$get()
solve(m)
mx <- makeCacheMatrix(rbind(c(1,2,3), c(2,1,3), c(3,1,2)))
m<-mx$get()
m
solve(m)
invs <- cacheSolve(mx)
ins
invs <- cacheSolve(mx)
invs
x<-matrix(1:4, 2,2)
y<-matrix(rep(10,4),2,2)
x
y
x*y
x%*%y
x
y
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
?rnorm
x <- list(a=1:5, b=rnorm(10, 7))
lapply(x, mean)
?runif
?elt
x<-matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
x<-matrix(1:4, 2,2)
x
apply(x, 2, mean)
apply(x, 2, sum)
apply(x, 1, sum)
apply(x, 3, sum)
apply(x, 2, sum)
?apply
?quantile
quantile(1:10, probs = seq(0,1, 0.25))
z<-array(rnorm(2*2*10), c(2,2,10))
z
z<-array(1:10, c(2,2,10))
z
size(a)
a?
;
a
z<-array(1:10, c(2,2,5,10))
z
?gl
x<-c(rnorm(10), runif(10),rnorm(10,1))
x
f<-gl(3,10)
f
tapply(x,f,mean)
tapply(x,sum,mean)
tapply(x,,mean)
?tapply
split(x,f)
x<-c(rnorm(10,1), rnormal(10,3),rnorm(10,7))
x<-c(rnorm(10,1), rnorm(10,3),rnorm(10,7))
f<-gl(3,10)
f
lapply(split(x,f), mean)
data<-read.csv("/home/eugen/Coursera/DataScience/RProg/Week2/specdata/310.csv")
data
?mapply
?lm
library(datasets)
data(iris)
?iris
data(iris)
iris
View(iris)
iris$Species
funmean <- function(X) {
if (X$Species == "virginica")
X$Length
}
funmean(iris)
?tapply
tapply(iris, 5, )
tapply(iris, 5, funmean)
?gl
f <- gl(3, 150, 50)
f
f <- gl(3, 150)
f
f <- gl(3, 50)
f
iris$Length
iris
iris$Sepal.Length
vec <- split(iris$Sepal.Length, f)
vec
split(iris$Sepal.Length, f)
vec <- split(iris$Sepal.Length, f)
vec$3
vec[3]
mean(vec[3])
mean(vec[3])
vec[3]
vec$'3'
mean(vec$'3')
apply(iris[, 1:4], 2, mean)
?apply
library(datasets)
data(mtcars)
mtcars
View(mtcars)
View(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
?tapply
?tapply
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
?ls
ls
debug(ls)
ls
debug(ls)
ls
ls(mtcars)
exit
quit
recover
data(mtcars)
mtcars
?mtcars
n
ls(mtcars)
nn
nn
n
n
n
n
n
n
with(mtcars, tapply(hp, cyl, sum))
install.packages("xlsx")
install.packages("xlsx")
library("datasets")
Iris <- iris
Iris.features = Iris[,c(1,2,3,4)]
View(Iris.features)
Iris.features$class <- NULL
result <- kmeans(Iris, 3)
result <- kmeans(Iris.features, 3)
result
names(result)
result$size
result$centers
result$betweens
result$iter
result$totss
result$cluster
?table
Iris$class
table(Iris$class, result$cluster)
View(Iris)
table(Iris$Species, result$cluster)
plot(Iris[c("petal.length", "petal.width")], col=result$cluster)
plot(Iris[c("petal.length", "petal.width")], col=result$cluster)
plot(Iris[c("Petal.Length", "Petal.Width")], col=result$cluster)
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5).
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", df)
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", df)
h5ls("example.h5")
h5write(df, "example.h5", "df"")
h5ls("example.h5")
h5write(df, "example.h5", "df")
h5ls("example.h5")
created = h5createFile("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
df
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA = h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readB
readdf
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
H5close()
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5", "foo/A")
h5dump("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
library(XML)
html <- htmlTreeParse(url, useInternalNodes=T)
url
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[&id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
xpathSApply(html, "//title", xmlValue)
myL <- xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
myL
names(myL)
library(httr)
html2 <- GET(url)
content2 <- content(html2, as="test")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 <- GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
pg1
pg2
myapp = oauth_app("twitter",
key=" vsyIpoi2WdGAIVYChhl4km2A5", secret="LmrCUUigwrk2N8VwtU2PDu1HRhgCQKcqYxtGMKtLRoYOiwaGGG")
sig = sign_oauth1.0(myapp, token="2571286993-YwXfyvsEQdVYeJoGDdefKk2SgRRoWhMuG1cTFJ1",
token_secret="KwBfAFtYMgGXMK2OfqaiO4QqVd2xR5QyFksDjjBOfk2Qo")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
names(homeTL)
homeTL$content
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json1
homeTL = GET("https://dev.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
sjon1
json1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
installed.packages(httpuv)
installed.packages("httpuv")
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
my_content <- content(req)
view(my_content)
names(my_content)
my_content
my_content
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?pairs
?qbeta
qbeta(0.5, 2, 1)
0.75 * 0.75
setwd(
"/home/eugen/Coursera/SI/week4")
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(ggplot2)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.s")
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")$power
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")
load(datasets)
load(mtcars)
datasets(mtcars)
dataset(mtcars)
library(datasets)
data(mtcars)
mtcars
t.test()
?t.test
m1 <- c(140,138,150,148,135)
m2 <- c(132,135,151,146,130)
t.test(m1,m2, paired = TRUE, var.equal=TRUE, alternative="two.sided")
t.test(m1,m2, paired = TRUE, var.equal=TRUE, alternative="two.sided")$p.value
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
?poisson.test
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
SE <- ( (n1 - 1) * sd1^2 + (n2 - 1) * sd2^2) / (n1 + n2 - 2)
t <- (mu1 - mu2) / (SE * sqrt(1/n1 + 1/n2))
p.val = 2 * pt(t, n1+n2-2)
# calculate pooled standard deviation
n1 = 9;
n2 = 9;
mu1 = -3;
sd1 = 1.5;
mu2 = 1;
sd2 = 1.8
SE <- ( (n1 - 1) * sd1^2 + (n2 - 1) * sd2^2) / (n1 + n2 - 2)
t <- (mu1 - mu2) / (SE * sqrt(1/n1 + 1/n2))
p.val = 2 * pt(t, n1+n2-2)
p.val
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- 0.9 #power
n <- power.t.test(power=pow, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
ceiling(n/10)*10
n
library(ggplot2)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
