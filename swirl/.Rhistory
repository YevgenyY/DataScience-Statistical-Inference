x <- list(a=1:5, b=rnorm(10, 7))
lapply(x, mean)
?runif
?elt
x<-matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
x<-matrix(1:4, 2,2)
x
apply(x, 2, mean)
apply(x, 2, sum)
apply(x, 1, sum)
apply(x, 3, sum)
apply(x, 2, sum)
?apply
?quantile
quantile(1:10, probs = seq(0,1, 0.25))
z<-array(rnorm(2*2*10), c(2,2,10))
z
z<-array(1:10, c(2,2,10))
z
size(a)
a?
;
a
z<-array(1:10, c(2,2,5,10))
z
?gl
x<-c(rnorm(10), runif(10),rnorm(10,1))
x
f<-gl(3,10)
f
tapply(x,f,mean)
tapply(x,sum,mean)
tapply(x,,mean)
?tapply
split(x,f)
x<-c(rnorm(10,1), rnormal(10,3),rnorm(10,7))
x<-c(rnorm(10,1), rnorm(10,3),rnorm(10,7))
f<-gl(3,10)
f
lapply(split(x,f), mean)
data<-read.csv("/home/eugen/Coursera/DataScience/RProg/Week2/specdata/310.csv")
data
?mapply
?lm
library(datasets)
data(iris)
?iris
data(iris)
iris
View(iris)
iris$Species
funmean <- function(X) {
if (X$Species == "virginica")
X$Length
}
funmean(iris)
?tapply
tapply(iris, 5, )
tapply(iris, 5, funmean)
?gl
f <- gl(3, 150, 50)
f
f <- gl(3, 150)
f
f <- gl(3, 50)
f
iris$Length
iris
iris$Sepal.Length
vec <- split(iris$Sepal.Length, f)
vec
split(iris$Sepal.Length, f)
vec <- split(iris$Sepal.Length, f)
vec$3
vec[3]
mean(vec[3])
mean(vec[3])
vec[3]
vec$'3'
mean(vec$'3')
apply(iris[, 1:4], 2, mean)
?apply
library(datasets)
data(mtcars)
mtcars
View(mtcars)
View(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
?tapply
?tapply
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
?ls
ls
debug(ls)
ls
debug(ls)
ls
ls(mtcars)
exit
quit
recover
data(mtcars)
mtcars
?mtcars
n
ls(mtcars)
nn
nn
n
n
n
n
n
n
with(mtcars, tapply(hp, cyl, sum))
install.packages("xlsx")
install.packages("xlsx")
library("datasets")
Iris <- iris
Iris.features = Iris[,c(1,2,3,4)]
View(Iris.features)
Iris.features$class <- NULL
result <- kmeans(Iris, 3)
result <- kmeans(Iris.features, 3)
result
names(result)
result$size
result$centers
result$betweens
result$iter
result$totss
result$cluster
?table
Iris$class
table(Iris$class, result$cluster)
View(Iris)
table(Iris$Species, result$cluster)
plot(Iris[c("petal.length", "petal.width")], col=result$cluster)
plot(Iris[c("petal.length", "petal.width")], col=result$cluster)
plot(Iris[c("Petal.Length", "Petal.Width")], col=result$cluster)
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5).
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", df)
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", df)
h5ls("example.h5")
h5write(df, "example.h5", "df"")
h5ls("example.h5")
h5write(df, "example.h5", "df")
h5ls("example.h5")
created = h5createFile("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
df
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA = h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readB
readdf
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
H5close()
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5", "foo/A")
h5dump("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
library(XML)
html <- htmlTreeParse(url, useInternalNodes=T)
url
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[&id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
xpathSApply(html, "//title", xmlValue)
myL <- xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
myL
names(myL)
library(httr)
html2 <- GET(url)
content2 <- content(html2, as="test")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 <- GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
pg1
pg2
myapp = oauth_app("twitter",
key=" vsyIpoi2WdGAIVYChhl4km2A5", secret="LmrCUUigwrk2N8VwtU2PDu1HRhgCQKcqYxtGMKtLRoYOiwaGGG")
sig = sign_oauth1.0(myapp, token="2571286993-YwXfyvsEQdVYeJoGDdefKk2SgRRoWhMuG1cTFJ1",
token_secret="KwBfAFtYMgGXMK2OfqaiO4QqVd2xR5QyFksDjjBOfk2Qo")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
names(homeTL)
homeTL$content
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json1
homeTL = GET("https://dev.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
sjon1
json1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
installed.packages(httpuv)
installed.packages("httpuv")
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
my_content <- content(req)
view(my_content)
names(my_content)
my_content
my_content
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?pairs
?qbeta
qbeta(0.5, 2, 1)
0.75 * 0.75
setwd("/home/eugen/Coursera/SI/swirl")
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl
swirl()
1-((2+1)/36)
deck
13*4
4/52
1*(1+1+1+1)/52
1*(1+1+1)/52
1*1/51*1/50*1/49
0
4*4/52
3*4/52
2/51
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(ggplot2)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
?galton
??galton
library(manipulate)
library(ggplot2)
library(histdata)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(histdata)
library(HistData)
install.packages("histdata")
install.packages("HistData")
library(manipulate)
library(ggplot2)
library(HistData)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data("galton")
data(galton)
library(manipulate)
library(ggplot2)
library(HistData)
data(galton)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))data
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
data(galton)
galton
?galton
?quinf
?qunif
quinf(0.75, 0,1)
qunif(0.75, 0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp[1]
temp[1,]
temp[2,]
temp[1,1]
temp[1,]
temp[,1]
temp[1,1]
temp[1,2]
temp[1,1]
temp[1,]
temp[,1]
temp$X[1]
temp$X[1,]
temp["X"]
temp[X]
temp["X".]
temp["X",]
temp["X",1]
temp["X",1]*temp["Prob",1]
temp["X",]*temp["Prob",]
tmp <- temp["X",]*temp["Prob",]
sum(tmp)
temp
tmp
d<-0.75
c<-0.52
p<-0.3
answer <- (d*p)/( (d*p) + (1-c)*(1-p))
answer
swirl
swirl()
1.6*0.8/2
0.64
mypdf
integrate(mypdf, 0, 1.6)
1
sqrt(2)
99.7*0.001
0.997*0.001
(1-0.997)*(1-0.001)
(1-0.985)*(1-0.001)
(0.997 * 0.001)/((1-0.985)*(1-0.001)
)
(0.997 * 0.001)/((1-0.985)+(1-0.001))
(0.997 * 0.001)/((0.997*0.001)+(1-0.985)*(1-0.001))
sum(c(1,2,3,4,5,6)*c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
mean(allsam)
apply(allsam,1,mean)
mean(smean)
mean(smeans)
